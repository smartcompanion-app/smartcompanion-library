/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ServiceFacade } from "@smartcompanion/services";
export { ServiceFacade } from "@smartcompanion/services";
export namespace Components {
    interface ScImageSlideshow {
        /**
          * List of image URLs to display in the slideshow
          * @default []
         */
        "images": string[];
    }
    interface ScMarquee {
        /**
          * @default false
         */
        "active": boolean;
    }
    interface ScNumpad {
        /**
          * Enable the confirm button
          * @default false
         */
        "full": boolean;
    }
    interface ScPageError {
        "facade": ServiceFacade;
    }
    interface ScPageLanguage {
        "facade": ServiceFacade;
    }
    interface ScPageLoading {
        "facade": ServiceFacade;
        /**
          * The default or home route, when loading is successfully completed
          * @default "/stations/default"
         */
        "homeRoute": string;
        /**
          * The image to display while loading
         */
        "image": string;
        /**
          * Loading Text Color 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "loadingTextColor": 'primary' | 'secondary';
        /**
          * Loading Progress Bar Color 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "progressBarColor": 'primary' | 'secondary';
        /**
          * Loading Spinner Color 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "spinnerColor": 'primary' | 'secondary';
    }
    interface ScPageMap {
        /**
          * Define default back button href, only used if enableBackButton is true
          * @default null
         */
        "defaultBackButtonHref": string;
        /**
          * Enable Back Button instead of Menu Button
          * @default false
         */
        "enableBackButton": boolean;
        "facade": ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor": 'primary' | 'secondary';
        /**
          * Map tiles attribution for the leaflet map
          * @default ''
         */
        "mapAttribution": string;
        /**
          * Map bounds for the leaflet map in top left Lat/Lng, bottom right Lat/Lng
         */
        "mapBounds": Array<number>;
        "tileUrlTemplate": string;
        /**
          * If tour id is given, stations only for the tour are shown. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId": string;
    }
    interface ScPageMultiAudioStation {
        /**
          * Define default back button href, only used if enableBackButton is true
          * @default null
         */
        "defaultBackButtonHref": string;
        /**
          * This prop displays a button for switching audio output between speaker and earpiece. This feature is only available on hybrid apps
          * @default false
         */
        "enableSwitchAudioOutput": boolean;
        "facade": ServiceFacade;
        /**
          * The ID of the active station to display
         */
        "stationId": string;
        /**
          * If tour id is given, stations are retrieved from specific tour. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId": string;
    }
    interface ScPagePin {
        "facade": ServiceFacade;
        /**
          * The number of hours the pin is valid for.
          * @default 6
         */
        "validHours": number;
    }
    interface ScPageSelection {
        "facade": ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor": 'primary' | 'secondary';
        /**
          * Maximum length of the input field, default to 2
          * @default 2
         */
        "maxLength": number;
        /**
          * If tour id is given, stations only for the tour are queried. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId": string;
    }
    interface ScPageStation {
        /**
          * Define default back button href, only used if enableBackButton is true
          * @default null
         */
        "defaultBackButtonHref": string;
        /**
          * Enable Back Button instead of Menu Button
          * @default false
         */
        "enableBackButton": boolean;
        /**
          * This prop displays a button for switching audio output between speaker and earpiece. This feature is only available on hybrid apps
          * @default false
         */
        "enableSwitchAudioOutput": boolean;
        "facade": ServiceFacade;
        /**
          * The ID of the active station to display
         */
        "stationId": string;
        /**
          * If tour id is given, stations are retrieved from specific tour. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId": string;
    }
    interface ScPageStationImageList {
        "facade": ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor": 'primary' | 'secondary';
        /**
          * The ID of the tour to display stations for, or null if all stations should be displayed
          * @default null
         */
        "tourId": string;
    }
    interface ScPageStationList {
        "facade": ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor": 'primary' | 'secondary';
        /**
          * The ID of the tour to display stations for, or null if all stations should be displayed
          * @default null
         */
        "tourId": string;
    }
    interface ScPageStations {
        "facade": ServiceFacade;
        /**
          * The ID of the initial active station to display, if set to null, the first station will be displayed
          * @default null
         */
        "stationId": string;
    }
    interface ScPageTabbedStationList {
        "facade": ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor": 'primary' | 'secondary';
        /**
          * The ID of the tour to display stations for, or null if all stations should be displayed
          * @default null
         */
        "tourId": string;
    }
    interface ScPageTourList {
        "facade": ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor": 'primary' | 'secondary';
    }
    interface ScPlayerControls {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 0
         */
        "duration": number;
        /**
          * @default false
         */
        "playing": boolean;
        /**
          * @default 0
         */
        "position": number;
    }
    interface ScStationIcon {
        /**
          * Toggle collected icon
          * @default false
         */
        "collected": boolean;
        /**
          * Percentage value between 0 and 100 to display status
          * @default 0
         */
        "collectedPercent": number;
        /**
          * The icon size: small, normal or large.
          * @default 'normal'
         */
        "size": 'small' | 'normal' | 'large';
        /**
          * @default 97
         */
        "upperLimitPercent": number;
    }
}
export interface ScNumpadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScNumpadElement;
}
export interface ScPlayerControlsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPlayerControlsElement;
}
declare global {
    interface HTMLScImageSlideshowElement extends Components.ScImageSlideshow, HTMLStencilElement {
    }
    var HTMLScImageSlideshowElement: {
        prototype: HTMLScImageSlideshowElement;
        new (): HTMLScImageSlideshowElement;
    };
    interface HTMLScMarqueeElement extends Components.ScMarquee, HTMLStencilElement {
    }
    var HTMLScMarqueeElement: {
        prototype: HTMLScMarqueeElement;
        new (): HTMLScMarqueeElement;
    };
    interface HTMLScNumpadElementEventMap {
        "delete": void;
        "confirm": void;
        "number": number;
    }
    interface HTMLScNumpadElement extends Components.ScNumpad, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScNumpadElementEventMap>(type: K, listener: (this: HTMLScNumpadElement, ev: ScNumpadCustomEvent<HTMLScNumpadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScNumpadElementEventMap>(type: K, listener: (this: HTMLScNumpadElement, ev: ScNumpadCustomEvent<HTMLScNumpadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScNumpadElement: {
        prototype: HTMLScNumpadElement;
        new (): HTMLScNumpadElement;
    };
    interface HTMLScPageErrorElement extends Components.ScPageError, HTMLStencilElement {
    }
    var HTMLScPageErrorElement: {
        prototype: HTMLScPageErrorElement;
        new (): HTMLScPageErrorElement;
    };
    interface HTMLScPageLanguageElement extends Components.ScPageLanguage, HTMLStencilElement {
    }
    var HTMLScPageLanguageElement: {
        prototype: HTMLScPageLanguageElement;
        new (): HTMLScPageLanguageElement;
    };
    interface HTMLScPageLoadingElement extends Components.ScPageLoading, HTMLStencilElement {
    }
    var HTMLScPageLoadingElement: {
        prototype: HTMLScPageLoadingElement;
        new (): HTMLScPageLoadingElement;
    };
    interface HTMLScPageMapElement extends Components.ScPageMap, HTMLStencilElement {
    }
    var HTMLScPageMapElement: {
        prototype: HTMLScPageMapElement;
        new (): HTMLScPageMapElement;
    };
    interface HTMLScPageMultiAudioStationElement extends Components.ScPageMultiAudioStation, HTMLStencilElement {
    }
    var HTMLScPageMultiAudioStationElement: {
        prototype: HTMLScPageMultiAudioStationElement;
        new (): HTMLScPageMultiAudioStationElement;
    };
    interface HTMLScPagePinElement extends Components.ScPagePin, HTMLStencilElement {
    }
    var HTMLScPagePinElement: {
        prototype: HTMLScPagePinElement;
        new (): HTMLScPagePinElement;
    };
    interface HTMLScPageSelectionElement extends Components.ScPageSelection, HTMLStencilElement {
    }
    var HTMLScPageSelectionElement: {
        prototype: HTMLScPageSelectionElement;
        new (): HTMLScPageSelectionElement;
    };
    interface HTMLScPageStationElement extends Components.ScPageStation, HTMLStencilElement {
    }
    var HTMLScPageStationElement: {
        prototype: HTMLScPageStationElement;
        new (): HTMLScPageStationElement;
    };
    interface HTMLScPageStationImageListElement extends Components.ScPageStationImageList, HTMLStencilElement {
    }
    var HTMLScPageStationImageListElement: {
        prototype: HTMLScPageStationImageListElement;
        new (): HTMLScPageStationImageListElement;
    };
    interface HTMLScPageStationListElement extends Components.ScPageStationList, HTMLStencilElement {
    }
    var HTMLScPageStationListElement: {
        prototype: HTMLScPageStationListElement;
        new (): HTMLScPageStationListElement;
    };
    interface HTMLScPageStationsElement extends Components.ScPageStations, HTMLStencilElement {
    }
    var HTMLScPageStationsElement: {
        prototype: HTMLScPageStationsElement;
        new (): HTMLScPageStationsElement;
    };
    interface HTMLScPageTabbedStationListElement extends Components.ScPageTabbedStationList, HTMLStencilElement {
    }
    var HTMLScPageTabbedStationListElement: {
        prototype: HTMLScPageTabbedStationListElement;
        new (): HTMLScPageTabbedStationListElement;
    };
    interface HTMLScPageTourListElement extends Components.ScPageTourList, HTMLStencilElement {
    }
    var HTMLScPageTourListElement: {
        prototype: HTMLScPageTourListElement;
        new (): HTMLScPageTourListElement;
    };
    interface HTMLScPlayerControlsElementEventMap {
        "prev": void;
        "next": void;
        "playPause": boolean;
        "startPositionChange": number;
        "endPositionChange": number;
        "positionChange": number;
    }
    interface HTMLScPlayerControlsElement extends Components.ScPlayerControls, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScPlayerControlsElementEventMap>(type: K, listener: (this: HTMLScPlayerControlsElement, ev: ScPlayerControlsCustomEvent<HTMLScPlayerControlsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScPlayerControlsElementEventMap>(type: K, listener: (this: HTMLScPlayerControlsElement, ev: ScPlayerControlsCustomEvent<HTMLScPlayerControlsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScPlayerControlsElement: {
        prototype: HTMLScPlayerControlsElement;
        new (): HTMLScPlayerControlsElement;
    };
    interface HTMLScStationIconElement extends Components.ScStationIcon, HTMLStencilElement {
    }
    var HTMLScStationIconElement: {
        prototype: HTMLScStationIconElement;
        new (): HTMLScStationIconElement;
    };
    interface HTMLElementTagNameMap {
        "sc-image-slideshow": HTMLScImageSlideshowElement;
        "sc-marquee": HTMLScMarqueeElement;
        "sc-numpad": HTMLScNumpadElement;
        "sc-page-error": HTMLScPageErrorElement;
        "sc-page-language": HTMLScPageLanguageElement;
        "sc-page-loading": HTMLScPageLoadingElement;
        "sc-page-map": HTMLScPageMapElement;
        "sc-page-multi-audio-station": HTMLScPageMultiAudioStationElement;
        "sc-page-pin": HTMLScPagePinElement;
        "sc-page-selection": HTMLScPageSelectionElement;
        "sc-page-station": HTMLScPageStationElement;
        "sc-page-station-image-list": HTMLScPageStationImageListElement;
        "sc-page-station-list": HTMLScPageStationListElement;
        "sc-page-stations": HTMLScPageStationsElement;
        "sc-page-tabbed-station-list": HTMLScPageTabbedStationListElement;
        "sc-page-tour-list": HTMLScPageTourListElement;
        "sc-player-controls": HTMLScPlayerControlsElement;
        "sc-station-icon": HTMLScStationIconElement;
    }
}
declare namespace LocalJSX {
    interface ScImageSlideshow {
        /**
          * List of image URLs to display in the slideshow
          * @default []
         */
        "images"?: string[];
    }
    interface ScMarquee {
        /**
          * @default false
         */
        "active"?: boolean;
    }
    interface ScNumpad {
        /**
          * Enable the confirm button
          * @default false
         */
        "full"?: boolean;
        "onConfirm"?: (event: ScNumpadCustomEvent<void>) => void;
        "onDelete"?: (event: ScNumpadCustomEvent<void>) => void;
        "onNumber"?: (event: ScNumpadCustomEvent<number>) => void;
    }
    interface ScPageError {
        "facade"?: ServiceFacade;
    }
    interface ScPageLanguage {
        "facade"?: ServiceFacade;
    }
    interface ScPageLoading {
        "facade"?: ServiceFacade;
        /**
          * The default or home route, when loading is successfully completed
          * @default "/stations/default"
         */
        "homeRoute"?: string;
        /**
          * The image to display while loading
         */
        "image"?: string;
        /**
          * Loading Text Color 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "loadingTextColor"?: 'primary' | 'secondary';
        /**
          * Loading Progress Bar Color 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "progressBarColor"?: 'primary' | 'secondary';
        /**
          * Loading Spinner Color 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "spinnerColor"?: 'primary' | 'secondary';
    }
    interface ScPageMap {
        /**
          * Define default back button href, only used if enableBackButton is true
          * @default null
         */
        "defaultBackButtonHref"?: string;
        /**
          * Enable Back Button instead of Menu Button
          * @default false
         */
        "enableBackButton"?: boolean;
        "facade"?: ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor"?: 'primary' | 'secondary';
        /**
          * Map tiles attribution for the leaflet map
          * @default ''
         */
        "mapAttribution"?: string;
        /**
          * Map bounds for the leaflet map in top left Lat/Lng, bottom right Lat/Lng
         */
        "mapBounds"?: Array<number>;
        "tileUrlTemplate"?: string;
        /**
          * If tour id is given, stations only for the tour are shown. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPageMultiAudioStation {
        /**
          * Define default back button href, only used if enableBackButton is true
          * @default null
         */
        "defaultBackButtonHref"?: string;
        /**
          * This prop displays a button for switching audio output between speaker and earpiece. This feature is only available on hybrid apps
          * @default false
         */
        "enableSwitchAudioOutput"?: boolean;
        "facade"?: ServiceFacade;
        /**
          * The ID of the active station to display
         */
        "stationId"?: string;
        /**
          * If tour id is given, stations are retrieved from specific tour. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPagePin {
        "facade"?: ServiceFacade;
        /**
          * The number of hours the pin is valid for.
          * @default 6
         */
        "validHours"?: number;
    }
    interface ScPageSelection {
        "facade"?: ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor"?: 'primary' | 'secondary';
        /**
          * Maximum length of the input field, default to 2
          * @default 2
         */
        "maxLength"?: number;
        /**
          * If tour id is given, stations only for the tour are queried. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPageStation {
        /**
          * Define default back button href, only used if enableBackButton is true
          * @default null
         */
        "defaultBackButtonHref"?: string;
        /**
          * Enable Back Button instead of Menu Button
          * @default false
         */
        "enableBackButton"?: boolean;
        /**
          * This prop displays a button for switching audio output between speaker and earpiece. This feature is only available on hybrid apps
          * @default false
         */
        "enableSwitchAudioOutput"?: boolean;
        "facade"?: ServiceFacade;
        /**
          * The ID of the active station to display
         */
        "stationId"?: string;
        /**
          * If tour id is given, stations are retrieved from specific tour. Tour id 'default' is a placeholder for the default tour id.
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPageStationImageList {
        "facade"?: ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor"?: 'primary' | 'secondary';
        /**
          * The ID of the tour to display stations for, or null if all stations should be displayed
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPageStationList {
        "facade"?: ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor"?: 'primary' | 'secondary';
        /**
          * The ID of the tour to display stations for, or null if all stations should be displayed
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPageStations {
        "facade"?: ServiceFacade;
        /**
          * The ID of the initial active station to display, if set to null, the first station will be displayed
          * @default null
         */
        "stationId"?: string;
    }
    interface ScPageTabbedStationList {
        "facade"?: ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor"?: 'primary' | 'secondary';
        /**
          * The ID of the tour to display stations for, or null if all stations should be displayed
          * @default null
         */
        "tourId"?: string;
    }
    interface ScPageTourList {
        "facade"?: ServiceFacade;
        /**
          * Background color of the header toolbar, either 'primary' or 'secondary' (default: 'primary')
          * @default 'primary'
         */
        "headerBackgroundColor"?: 'primary' | 'secondary';
    }
    interface ScPlayerControls {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 0
         */
        "duration"?: number;
        "onEndPositionChange"?: (event: ScPlayerControlsCustomEvent<number>) => void;
        "onNext"?: (event: ScPlayerControlsCustomEvent<void>) => void;
        "onPlayPause"?: (event: ScPlayerControlsCustomEvent<boolean>) => void;
        "onPositionChange"?: (event: ScPlayerControlsCustomEvent<number>) => void;
        "onPrev"?: (event: ScPlayerControlsCustomEvent<void>) => void;
        "onStartPositionChange"?: (event: ScPlayerControlsCustomEvent<number>) => void;
        /**
          * @default false
         */
        "playing"?: boolean;
        /**
          * @default 0
         */
        "position"?: number;
    }
    interface ScStationIcon {
        /**
          * Toggle collected icon
          * @default false
         */
        "collected"?: boolean;
        /**
          * Percentage value between 0 and 100 to display status
          * @default 0
         */
        "collectedPercent"?: number;
        /**
          * The icon size: small, normal or large.
          * @default 'normal'
         */
        "size"?: 'small' | 'normal' | 'large';
        /**
          * @default 97
         */
        "upperLimitPercent"?: number;
    }
    interface IntrinsicElements {
        "sc-image-slideshow": ScImageSlideshow;
        "sc-marquee": ScMarquee;
        "sc-numpad": ScNumpad;
        "sc-page-error": ScPageError;
        "sc-page-language": ScPageLanguage;
        "sc-page-loading": ScPageLoading;
        "sc-page-map": ScPageMap;
        "sc-page-multi-audio-station": ScPageMultiAudioStation;
        "sc-page-pin": ScPagePin;
        "sc-page-selection": ScPageSelection;
        "sc-page-station": ScPageStation;
        "sc-page-station-image-list": ScPageStationImageList;
        "sc-page-station-list": ScPageStationList;
        "sc-page-stations": ScPageStations;
        "sc-page-tabbed-station-list": ScPageTabbedStationList;
        "sc-page-tour-list": ScPageTourList;
        "sc-player-controls": ScPlayerControls;
        "sc-station-icon": ScStationIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sc-image-slideshow": LocalJSX.ScImageSlideshow & JSXBase.HTMLAttributes<HTMLScImageSlideshowElement>;
            "sc-marquee": LocalJSX.ScMarquee & JSXBase.HTMLAttributes<HTMLScMarqueeElement>;
            "sc-numpad": LocalJSX.ScNumpad & JSXBase.HTMLAttributes<HTMLScNumpadElement>;
            "sc-page-error": LocalJSX.ScPageError & JSXBase.HTMLAttributes<HTMLScPageErrorElement>;
            "sc-page-language": LocalJSX.ScPageLanguage & JSXBase.HTMLAttributes<HTMLScPageLanguageElement>;
            "sc-page-loading": LocalJSX.ScPageLoading & JSXBase.HTMLAttributes<HTMLScPageLoadingElement>;
            "sc-page-map": LocalJSX.ScPageMap & JSXBase.HTMLAttributes<HTMLScPageMapElement>;
            "sc-page-multi-audio-station": LocalJSX.ScPageMultiAudioStation & JSXBase.HTMLAttributes<HTMLScPageMultiAudioStationElement>;
            "sc-page-pin": LocalJSX.ScPagePin & JSXBase.HTMLAttributes<HTMLScPagePinElement>;
            "sc-page-selection": LocalJSX.ScPageSelection & JSXBase.HTMLAttributes<HTMLScPageSelectionElement>;
            "sc-page-station": LocalJSX.ScPageStation & JSXBase.HTMLAttributes<HTMLScPageStationElement>;
            "sc-page-station-image-list": LocalJSX.ScPageStationImageList & JSXBase.HTMLAttributes<HTMLScPageStationImageListElement>;
            "sc-page-station-list": LocalJSX.ScPageStationList & JSXBase.HTMLAttributes<HTMLScPageStationListElement>;
            "sc-page-stations": LocalJSX.ScPageStations & JSXBase.HTMLAttributes<HTMLScPageStationsElement>;
            "sc-page-tabbed-station-list": LocalJSX.ScPageTabbedStationList & JSXBase.HTMLAttributes<HTMLScPageTabbedStationListElement>;
            "sc-page-tour-list": LocalJSX.ScPageTourList & JSXBase.HTMLAttributes<HTMLScPageTourListElement>;
            "sc-player-controls": LocalJSX.ScPlayerControls & JSXBase.HTMLAttributes<HTMLScPlayerControlsElement>;
            "sc-station-icon": LocalJSX.ScStationIcon & JSXBase.HTMLAttributes<HTMLScStationIconElement>;
        }
    }
}
