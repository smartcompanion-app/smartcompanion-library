/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ServiceFacade } from "@smartcompanion/services";
export { ServiceFacade } from "@smartcompanion/services";
export namespace Components {
    interface ScMarquee {
        /**
          * @default false
         */
        "active": boolean;
    }
    interface ScNumpad {
        /**
          * Enable the confirm button
          * @default false
         */
        "full": boolean;
    }
    interface ScPageError {
        "facade": ServiceFacade;
    }
    interface ScPageLanguage {
        "facade": ServiceFacade;
    }
    interface ScPageLoading {
        "facade": ServiceFacade;
        "image": string;
    }
    interface ScPagePin {
        "facade": ServiceFacade;
        /**
          * The number of hours the pin is valid for.
          * @default 6
         */
        "validHours": number;
    }
    interface ScPageSelection {
        "facade": ServiceFacade;
    }
    interface ScPlayerControls {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 0
         */
        "duration": number;
        /**
          * @default false
         */
        "playing": boolean;
        /**
          * @default 0
         */
        "position": number;
    }
    interface ScStationIcon {
        /**
          * Toggle collected icon
          * @default false
         */
        "collected": boolean;
        /**
          * Percentage value between 0 and 100 to display status
          * @default 0
         */
        "collectedPercent": number;
        /**
          * @default 97
         */
        "upperLimitPercent": number;
    }
}
export interface ScNumpadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScNumpadElement;
}
export interface ScPlayerControlsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPlayerControlsElement;
}
declare global {
    interface HTMLScMarqueeElement extends Components.ScMarquee, HTMLStencilElement {
    }
    var HTMLScMarqueeElement: {
        prototype: HTMLScMarqueeElement;
        new (): HTMLScMarqueeElement;
    };
    interface HTMLScNumpadElementEventMap {
        "delete": void;
        "confirm": void;
        "number": number;
    }
    interface HTMLScNumpadElement extends Components.ScNumpad, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScNumpadElementEventMap>(type: K, listener: (this: HTMLScNumpadElement, ev: ScNumpadCustomEvent<HTMLScNumpadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScNumpadElementEventMap>(type: K, listener: (this: HTMLScNumpadElement, ev: ScNumpadCustomEvent<HTMLScNumpadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScNumpadElement: {
        prototype: HTMLScNumpadElement;
        new (): HTMLScNumpadElement;
    };
    interface HTMLScPageErrorElement extends Components.ScPageError, HTMLStencilElement {
    }
    var HTMLScPageErrorElement: {
        prototype: HTMLScPageErrorElement;
        new (): HTMLScPageErrorElement;
    };
    interface HTMLScPageLanguageElement extends Components.ScPageLanguage, HTMLStencilElement {
    }
    var HTMLScPageLanguageElement: {
        prototype: HTMLScPageLanguageElement;
        new (): HTMLScPageLanguageElement;
    };
    interface HTMLScPageLoadingElement extends Components.ScPageLoading, HTMLStencilElement {
    }
    var HTMLScPageLoadingElement: {
        prototype: HTMLScPageLoadingElement;
        new (): HTMLScPageLoadingElement;
    };
    interface HTMLScPagePinElement extends Components.ScPagePin, HTMLStencilElement {
    }
    var HTMLScPagePinElement: {
        prototype: HTMLScPagePinElement;
        new (): HTMLScPagePinElement;
    };
    interface HTMLScPageSelectionElement extends Components.ScPageSelection, HTMLStencilElement {
    }
    var HTMLScPageSelectionElement: {
        prototype: HTMLScPageSelectionElement;
        new (): HTMLScPageSelectionElement;
    };
    interface HTMLScPlayerControlsElementEventMap {
        "prev": void;
        "next": void;
        "playPause": boolean;
        "startPositionChange": number;
        "endPositionChange": number;
        "positionChange": number;
    }
    interface HTMLScPlayerControlsElement extends Components.ScPlayerControls, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScPlayerControlsElementEventMap>(type: K, listener: (this: HTMLScPlayerControlsElement, ev: ScPlayerControlsCustomEvent<HTMLScPlayerControlsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScPlayerControlsElementEventMap>(type: K, listener: (this: HTMLScPlayerControlsElement, ev: ScPlayerControlsCustomEvent<HTMLScPlayerControlsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScPlayerControlsElement: {
        prototype: HTMLScPlayerControlsElement;
        new (): HTMLScPlayerControlsElement;
    };
    interface HTMLScStationIconElement extends Components.ScStationIcon, HTMLStencilElement {
    }
    var HTMLScStationIconElement: {
        prototype: HTMLScStationIconElement;
        new (): HTMLScStationIconElement;
    };
    interface HTMLElementTagNameMap {
        "sc-marquee": HTMLScMarqueeElement;
        "sc-numpad": HTMLScNumpadElement;
        "sc-page-error": HTMLScPageErrorElement;
        "sc-page-language": HTMLScPageLanguageElement;
        "sc-page-loading": HTMLScPageLoadingElement;
        "sc-page-pin": HTMLScPagePinElement;
        "sc-page-selection": HTMLScPageSelectionElement;
        "sc-player-controls": HTMLScPlayerControlsElement;
        "sc-station-icon": HTMLScStationIconElement;
    }
}
declare namespace LocalJSX {
    interface ScMarquee {
        /**
          * @default false
         */
        "active"?: boolean;
    }
    interface ScNumpad {
        /**
          * Enable the confirm button
          * @default false
         */
        "full"?: boolean;
        "onConfirm"?: (event: ScNumpadCustomEvent<void>) => void;
        "onDelete"?: (event: ScNumpadCustomEvent<void>) => void;
        "onNumber"?: (event: ScNumpadCustomEvent<number>) => void;
    }
    interface ScPageError {
        "facade"?: ServiceFacade;
    }
    interface ScPageLanguage {
        "facade"?: ServiceFacade;
    }
    interface ScPageLoading {
        "facade"?: ServiceFacade;
        "image"?: string;
    }
    interface ScPagePin {
        "facade"?: ServiceFacade;
        /**
          * The number of hours the pin is valid for.
          * @default 6
         */
        "validHours"?: number;
    }
    interface ScPageSelection {
        "facade"?: ServiceFacade;
    }
    interface ScPlayerControls {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 0
         */
        "duration"?: number;
        "onEndPositionChange"?: (event: ScPlayerControlsCustomEvent<number>) => void;
        "onNext"?: (event: ScPlayerControlsCustomEvent<void>) => void;
        "onPlayPause"?: (event: ScPlayerControlsCustomEvent<boolean>) => void;
        "onPositionChange"?: (event: ScPlayerControlsCustomEvent<number>) => void;
        "onPrev"?: (event: ScPlayerControlsCustomEvent<void>) => void;
        "onStartPositionChange"?: (event: ScPlayerControlsCustomEvent<number>) => void;
        /**
          * @default false
         */
        "playing"?: boolean;
        /**
          * @default 0
         */
        "position"?: number;
    }
    interface ScStationIcon {
        /**
          * Toggle collected icon
          * @default false
         */
        "collected"?: boolean;
        /**
          * Percentage value between 0 and 100 to display status
          * @default 0
         */
        "collectedPercent"?: number;
        /**
          * @default 97
         */
        "upperLimitPercent"?: number;
    }
    interface IntrinsicElements {
        "sc-marquee": ScMarquee;
        "sc-numpad": ScNumpad;
        "sc-page-error": ScPageError;
        "sc-page-language": ScPageLanguage;
        "sc-page-loading": ScPageLoading;
        "sc-page-pin": ScPagePin;
        "sc-page-selection": ScPageSelection;
        "sc-player-controls": ScPlayerControls;
        "sc-station-icon": ScStationIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sc-marquee": LocalJSX.ScMarquee & JSXBase.HTMLAttributes<HTMLScMarqueeElement>;
            "sc-numpad": LocalJSX.ScNumpad & JSXBase.HTMLAttributes<HTMLScNumpadElement>;
            "sc-page-error": LocalJSX.ScPageError & JSXBase.HTMLAttributes<HTMLScPageErrorElement>;
            "sc-page-language": LocalJSX.ScPageLanguage & JSXBase.HTMLAttributes<HTMLScPageLanguageElement>;
            "sc-page-loading": LocalJSX.ScPageLoading & JSXBase.HTMLAttributes<HTMLScPageLoadingElement>;
            "sc-page-pin": LocalJSX.ScPagePin & JSXBase.HTMLAttributes<HTMLScPagePinElement>;
            "sc-page-selection": LocalJSX.ScPageSelection & JSXBase.HTMLAttributes<HTMLScPageSelectionElement>;
            "sc-player-controls": LocalJSX.ScPlayerControls & JSXBase.HTMLAttributes<HTMLScPlayerControlsElement>;
            "sc-station-icon": LocalJSX.ScStationIcon & JSXBase.HTMLAttributes<HTMLScStationIconElement>;
        }
    }
}
